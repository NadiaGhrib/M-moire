# -*- coding: utf-8 -*-
"""TEST ARIMA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xm7jdosxBJActcPxeKv5uTLCxzbIZHs3
"""

pip install quandl

import quandl
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.arima_model import ARIMA
from pandas.plotting import register_matplotlib_converters
register_matplotlib_converters()
import warnings
import itertools
import statsmodels.api as sm

df= quandl.get("BITSTAMP/USD", authtoken="Sf9Hs9BMkLK6QLEewDU9")

df.to_csv('data.csv')
df=pd.read_csv('data.csv', index_col=0)

df.head()

price = df[['Last']]
y=df.Last
y.plot(figsize=(15, 6))
plt.show()

#Il peut être difficile de travailler avec des données hebdomadaires, car elles sont plus courtes, alors utilisons plutôt des moyennes mensuelles. 
#Nous allons effectuer la conversion avec la fonction de rééchantillonnage. 

#la fonction fillna =  pour nous assurer que nous n'avons aucune valeur manquante dans notre série chronologique.

# La chaîne 'MS' regroupe les données dans des compartiments par début de mois
y = y.resample('MS').mean()


# Le terme bfill signifie que nous utilisons la valeur avant de remplir les valeurs manquantes
y = y.fillna(y.bfill())

print(y)

y.plot(figsize=(15, 6))
plt.show()

Modèle Arima 

# DOn éfinit les paramètres p, d et q pour prendre n'importe quelle valeur entre 0 et 2
p = d = q = range(0, 2)

pdq = list(itertools.product(p, d, q))


# Générez toutes les différentes combinaisons de triplets p, q et q
seasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]

print('Examples of parameter combinations for Seasonal ARIMA...')
print('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))
print('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))
print('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))
print('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[4]))

warnings.filterwarnings("ignore") # specify to ignore warning messages

for param in pdq:
    for param_seasonal in seasonal_pdq:
        try:
            mod = sm.tsa.statespace.SARIMAX(y,
                                            order=param,
                                            seasonal_order=param_seasonal,
                                            enforce_stationarity=False,
                                            enforce_invertibility=False)

            results = mod.fit()

            print('ARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))
        except:
            continue

mod = sm.tsa.statespace.SARIMAX(y,
                               order=(1, 1, 1),
                               seasonal_order=(1, 1, 1, 12),
                               enforce_stationarity=False,
                               enforce_invertibility=False)

results = mod.fit()

print(results.summary().tables[1])

#Notre principale préoccupation est de nous assurer que les résidus de notre modèle ne sont pas corrélés et normalement distribués avec une moyenne nulle. 
#Si le modèle saisonnier ARIMA ne satisfait pas ces propriétés, c'est une bonne indication qu'il peut être encore amélioré.

#Dans le graphique en haut à droite, nous voyons que la ligne KDE orange suit de près la ligne N (0,1) 
#C'est une bonne indication que les résidus sont normalement distribués.

#Le graphique qq en bas à gauche montre que la distribution ordonnée des résidus (points bleus) suit un peu près la tendance linéaire des échantillons prélevés 
#dans une distribution normale standard avec N (0, 1). Encore une fois, cela indique que les résidus sont normalement distribués.

#en bas à droite, qui montre que les résidus de séries chronologiques ont une faible corrélation avec les versions décalées de lui-même.

results.plot_diagnostics(figsize=(15, 12))
plt.show()

#On va comparer les valeurs prédites aux valeurs réelles de la série chronologique, ce qui nous aidera à comprendre l'exactitude de nos prévisions. 
#Les attributs get_prediction () et conf_int () nous permettent d'obtenir les valeurs et les intervalles de confiance associés pour les prévisions de la série chronologique.

#L'argument dynamic = False garantit que nous produisons des prévisions à une étape, 
#ce qui signifie que les prévisions à chaque point sont générées en utilisant l'historique complet jusqu'à ce point.

pred = results.get_prediction(start=pd.to_datetime('2018-04-01'), dynamic=False)
pred_ci = pred.conf_int()

ax = y["2014":].plot(label='Last')
pred.predicted_mean.plot(ax=ax, label='One-step ahead Forecast', alpha=.7)

ax.fill_between(pred_ci.index,
               pred_ci.iloc[:, 0],
               pred_ci.iloc[:, 1], color='k', alpha=.2)

ax.set_xlabel('Date')
ax.set_ylabel('Label')
plt.legend()

plt.show()



#Dans l'ensemble, nos prévisions s'alignent très bien sur les vraies valeurs

#Nous utiliserons le MSE (Mean Squared Error), qui résume l'erreur moyenne de nos prévisions. 
#Les résultats doivent être mis au carré pour que les différences positives / négatives ne s'annulent pas lorsque nous calculons la moyenne globale.

y_forecasted = pred.predicted_mean
y_truth = y['2018-04-01':]

from sklearn.metrics import mean_squared_error

mean_squared_error(y_truth, y_forecasted,squared=False)

#MSE est probablement le critère quantitatif le plus utilisé pour comparer valeurs calculées et valeurs observées.
#MSE est grand, peut être parce que le modèle sur-estime systématiquement

pred_dynamic = results.get_prediction(start=pd.to_datetime('2018-04-01'), dynamic=True, full_results=True)
pred_dynamic_ci = pred_dynamic.conf_int()

ax = y['2014':].plot(label='observed', figsize=(20, 15))
pred_dynamic.predicted_mean.plot(label='Dynamic Forecast', ax=ax)

ax.fill_between(pred_dynamic_ci.index,
                pred_dynamic_ci.iloc[:, 0],
                pred_dynamic_ci.iloc[:, 1], color='k', alpha=.25)

ax.fill_betweenx(ax.get_ylim(), pd.to_datetime('2018-04-01'), y.index[-1],
                 alpha=.1, zorder=-1)

ax.set_xlabel('Date')
ax.set_ylabel('Last')

plt.legend()
plt.show()

#Pas bon /Donc stop

#L'attribut get_forecast () de notre objet de série chronologique peut calculer les valeurs prévues pour un nombre spécifié d'étapes à venir.

pred_uc = results.get_forecast(steps=10)


pred_ci = pred_uc.conf_int()

ax = y.plot(label='observed', figsize=(20, 15))
pred_uc.predicted_mean.plot(ax=ax, label='Forecast')
ax.fill_between(pred_ci.index,
                pred_ci.iloc[:, 0],
                pred_ci.iloc[:, 1], color='k', alpha=.25)
ax.set_xlabel('Date')
ax.set_ylabel('Last')

plt.legend()
plt.show()